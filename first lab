#include <iostream>
#include <string>

struct Node {
    std::string personName;
    int personAge;
    double personHeight;
    Node* nextNode;
};

class LinkedList {
public:
    LinkedList() : firstNode(nullptr) {}
    ~LinkedList();
    
    void addToFront(const std::string& personName, int personAge, double personHeight);
    void addToEnd(const std::string& personName, int personAge, double personHeight);
    void addAfter(const std::string& target, const std::string& personName, int personAge, double personHeight);
    void addBefore(const std::string& target, const std::string& personName, int personAge, double personHeight);
    void removeByName(const std::string& personName);
    void display() const;

private:
    Node* firstNode;
};

LinkedList::~LinkedList() {
    while (firstNode) {
        Node* temp = firstNode;
        firstNode = firstNode->nextNode;
        delete temp;
    }
}

void LinkedList::addToFront(const std::string& personName, int personAge, double personHeight) {
    Node* newNode = new Node{personName, personAge, personHeight, firstNode};
    firstNode = newNode;
}

void LinkedList::addToEnd(const std::string& personName, int personAge, double personHeight) {
    Node* newNode = new Node{personName, personAge, personHeight, nullptr};
    if (!firstNode) {
        firstNode = newNode;
        return;
    }
    Node* temp = firstNode;
    while (temp->nextNode) {
        temp = temp->nextNode;
    }
    temp->nextNode = newNode;
}

void LinkedList::addAfter(const std::string& target, const std::string& personName, int personAge, double personHeight) {
    Node* temp = firstNode;
    while (temp && temp->personName != target) {
        temp = temp->nextNode;
    }
    if (temp) {
        Node* newNode = new Node{personName, personAge, personHeight, temp->nextNode};
        temp->nextNode = newNode;
    }
}

void LinkedList::addBefore(const std::string& target, const std::string& personName, int personAge, double personHeight) {
    if (!firstNode) return;
    if (firstNode->personName == target) {
        addToFront(personName, personAge, personHeight);
        return;
    }
    Node* temp = firstNode;
    while (temp->nextNode && temp->nextNode->personName != target) {
        temp = temp->nextNode;
    }
    if (temp->nextNode) {
        Node* newNode = new Node{personName, personAge, personHeight, temp->nextNode};
        temp->nextNode = newNode;
    }
}

void LinkedList::removeByName(const std::string& personName) {
    if (!firstNode) return;
    if (firstNode->personName == personName) {
        Node* temp = firstNode;
        firstNode = firstNode->nextNode;
        delete temp;
        return;
    }
    Node* temp = firstNode;
    while (temp->nextNode && temp->nextNode->personName != personName) {
        temp = temp->nextNode;
    }
    if (temp->nextNode) {
        Node* toDelete = temp->nextNode;
        temp->nextNode = temp->nextNode->nextNode;
        delete toDelete;
    }
}

void LinkedList::display() const {
    Node* temp = firstNode;
    while (temp) {
        std::cout << "Name: " << temp->personName << ", Age: " << temp->personAge << ", Height: " << temp->personHeight << '\n';
        temp = temp->nextNode;
    }
}

int main() {
    LinkedList list;
    
    list.addToEnd("Alice", 25, 5.6);
    list.addToFront("Bob", 30, 5.9);
    list.addAfter("Alice", "Charlie", 28, 5.8);
    list.addBefore("Alice", "David", 35, 5.7);
    
    std::cout << "List after additions:\n";
    list.display();
    
    list.removeByName("Charlie");
    std::cout << "\nList after removing Charlie:\n";
    list.display();
    
    return 0;
}
